FORMAT: 1A
HOST: https://api.lightrail.com/v1/

# Lightrail API

Welcome to the Lightrail API documentation.  Lightrail is an extremely powerful and flexible platform, but designed to be rapidly adopted and built into.
This document is part of that experience; In addition to being a fully interactive REST reference, it is designed to minimize implementation time by elaborating on common
use cases, explaining the relevant portions of the Lightrail system and giving common API calls and examples for each.  Don't hesitate to reach out at any point. 
Contact us anytime at hello@lightrail.com - we are here to help you solidify your use case and implementation.

### A Note on the Documentation
This interactive documentation will provide full code samples in many popular languages and let you try out all functionality.

The API Blueprint file that produces this documentation is in GitHub at https://github.com/Giftbit/Lightrail-API-Docs. If you find a mistake or have a suggestion for improvement, please submit it directly via pull request.

### Common Use Cases
This documentation will explore in detail the most common use-cases of the Lightrail API. 
Generally our users are looking to implement either of the following programs:
<ol>
    <li>A gift card program</li>
    <li>A customer account credit or points program </li>
</ol>

Note that this is not an exhaustive list and some use cases will require a combination of the two. 
Lightrail is designed to power and enhance any use case of stored value.  We are here to work with you.

In each scenario, the power of Lightrail Promotions allows you to incentivize and motivate your users. Lightrail also provides a rich statistical interface which will give you more insight into your program.

## Getting Started

### API Base URL

The base URL for Lightrail's API is <em>https://api.lightrail.com/v1/</em>.

### Lightrail User Creation and Authorization

You'll need your test or production `access_token` from your Lightrail user details page to use the API. If you don't already have a user account, you can <em><a href="https://www.lightrail.com/#gform" target="_blank">contact us to request a demo</a></em>. Be sure to store your production `access_token` extremely securely in your production configurations.

Note that in your user settings you can toggle to a test mode which provides you with a test `access_token`. This allows you to make calls to the API without affecting your Cards or the calculated statistics in live mode. Emails sent from test mode will be labeled as such.

You authenticate with your `access_token` by including your token prefixed by the word ‘Bearer’ (case sensitive) and a space in the Authorization HTTP header. For example `Authorization: Bearer {access_token}`.

## The Lightrail Object Model
The full API object model is here for your reference. Depending on your use case, you may not need to use every object/endpoint. Read on for use case elaboration

![Lightrail Object Model](http://resources.giftbit.com/api/embeddedimages/Lightrail_Object_Model_(stacked).png)

### Lightrail Cards: The Core Object

The Card is a fundamental object in the Lightrail API and provides the functionality for managing branded currency. 
The concept of a Card can represent any sort of value that your business wishes to issue. 
Simply stated, a Card is a device for which value can be attached and transacted against. 

There are two types of Cards: Gift Cards and Account Cards. These are both represented as a Card but with a different `cardType` attribute. 

#### Gift Cards

Gift Cards, as you might guess, are used when implementing a gift card program. Gift Cards have a `fullcode` which is a unique and unguessable alpha-numeric code that can be distributed to a recipient. 
In a standard gift card program the recipient would manually enter the `fullcode` during the checkout process.

#### Account Cards

Account Cards represent value that is attached to a Contact. They are used when implementing a customer account credit or points program and can be thought of as a customer's account, kind of like a bank account.
Since Account Cards do not have a `fullcode`, their value is interacted with using the Card object. 

## Use Case Exploration

The following sections dive into Lightrail's most common use cases. Feel free to skip to the section relevant to you. If you're not sure which applies to you, please don't hesitate to ask, we're here to help!

Also note, the ability to incentivize your users or recipients through Lightrail Card Promotions is availabe for both Gift Cards and Account Cards. 
Detailed information for Card Promotions and how it can be applied to either use case can be found in the following [Card Promotions Section](http://docs.giftbitcurrencyapi19.apiary.io/#introduction/card-promotions). 

### Use Case 1: Powering Your Gift Card Program
 
A common use case for the Lightrail API is one in which Lightrail powers your gift cards. 

For example, suppose your business is an online ecommerce platform and you want to enable your customers to purchase gift cards.
When a customer purchases a gift card, you would create a Gift Card in the Lightrail API. You would retrieve the Gift Card's `fullcode` and deliver it to the customer.
Your store's checkout process would need to allow customers the opportunity to enter the `fullcode` of any gift cards they have.
When completing the purchase you would create a Transaction using the customer entered `fullcode`, redeeming the required value from the Gift Card, completing the transaction. 

Lightrail enables fine grained control of the rules for which Gift Cards can be issued using Gift Card Programs.

#### Lightrail Gift Card Programs

A Gift Card Program describes the rules and restrictions that apply to the Gift Cards created from that Program. 
For example, a Gift Card Program might declare that all Gift Cards are issued in USD, with an `initialValue` in the range of $5 - 100, and never expire. 

To create a Gift Card, it must be created using a Gift Card Program. 
You may create Gift Card Programs within the <a href="https://www.lightrail.com/app/#/programs" target="_blank">Gift Card</a> section of the Lightrail web application. 
Gift Card Programs are also used to structure and organize related Gift Cards, and also improve tracking of activity within your account. 

Gift Card Programs also provide the flexibility to add integrators. Adding integrators allows you to lend permission so another party can create and issue Gift Cards from your Gift Card Program. 
For more information on this functionality, please contact `hello@giftbit.com`.

#### Common Requests in Gift Card Integration

| Action                        | Type   | Body                                                                                                                | Endpoint                               | 
|:------------------------------|--------|---------------------------------------------------------------------------------------------------------------------|----------------------------------------|
| Create Gift Card              | `POST` | `{'userSuppliedId':'gc1', 'cardType':'GIFT_CARD', 'programId':'program-123', 'initialValue':500, 'currency':'USD'}` | `.../v1/cards`                         | 
| Retrieve `fullcode`           | `GET`  |                                                                                                                     | `.../v1/cards/<cardId>/fullcode`       |
| Check Balance                 | `GET`  |                                                                                                                     | `.../v1/codes/<fullcode>/balance`      |
| Create Transaction            | `POST` | `{'userSuppliedId':'tx1', 'value':-10, 'currency':'USD'}`                                                           | `.../v1/codes/<fullcode>/transactions` | 
| Retrieve Transaction History  | `GET`  |                                                                                                                     | `.../v1/codes/<fullcode>/transactions` | 

Note, there may be additional endpoints you'd need to use depending on your use-case. 

### Use Case 2: Power an Account Credit or Points Program

Another common use case is one in which Lightrail manages value attached to your customers. 

For example, suppose you'd like to enable your users to earn points within your platform.
Once a user has earned enough points perhaps you'd like to allow them to spend their points and choose a reward.
In this use case you would create a Contact in the Lightrail API followed by creating an Account Card for that Contact.
This Account Card would be used to track the customer's points. 
As a customer earns or spends value, you would add or subtract value by creating Transactions against the Account Card in the Lightrail API.

#### Common Requests in Account Credit or Points Program

| Action                             | Type   | Body                                                                                               | Endpoint                                                               | 
|:-----------------------------------|--------|----------------------------------------------------------------------------------------------------|------------------------------------------------------------------------|
| Create Contact                     | `POST` | `{'userSuppliedId':'ct1', 'email':'name@example.com'}`                                             | `.../v1/contacts`                                                      | 
| Create Account Card                | `POST` | `{'userSuppliedId':'ac1', 'cardType':'ACCOUNT_CARD', 'contactId':'contact-123', 'currency':'XXX'}` | `.../v1/cards`                                                         | 
| Check Balance                      | `GET`  |                                                                                                    | `.../v1/cards/<cardId>/balance`                                        |
| Create Transaction                 | `POST` | `{'userSuppliedId':'tx1', 'value':-10, 'currency':'XXX'}`                                          | `.../v1/cards/<cardId>/transactions`                                   | 
| Retrieve Transaction History       | `GET`  |                                                                                                    | `.../v1/cards/<cardId>/transactions`                                   | 
| Retrieve Account Card from Contact | `GET`  |                                                                                                    | `.../v1/cards?contactId=<contactId>&currency=XXX&cardType=ACCOUNT_CARD`|

Note, in these example calls the currency is set to `XXX` to represent points although `USD` or any other valid currency code could be used if you wanted to track a dollar figure.
Also, in this sort of use-case we recommend storing the Account Card's `cardId` with your customer's account within your application. This will remove an unnecessary lookup each time you want to update a cusomt'ers points.

If this use case fits your need for points, a great way to reward your customers is offer them gift cards from top brands through <a href="https://www.giftbit.com" target="_blank">Giftbit’s Rewards API.</a>

## Super Charge your Branded Currency: Promotions

In addition to the many capabilities Lightrail provides out of the box, Lightrail enables you the abilty to attach Promotions to Cards, allowing you to incentivize and motivate your users or recipeints. 
Promotions can be use in both the gift card and account credit use cases. 

Promotions are created from a Promotion Program. 
Similar to a Gift Card Program, they enable you to restrict promotion properties such the allowed value ranges, currency, and custom expiry. 
A Card is always created with a `PRINCIPAL` ValueStore. When promotions are attached, they are represented as `ATTACHED` ValueStores.

#### How Promotions Fit Into the Lightrail Object Model

For example, suppose you've created a $10 USD Card. It could be either a Gift Card or Account Card. Below is a model of the newly created objects.

![Promotion Object Model Part1](http://resources.giftbit.com/api/embeddedimages/Lightrail_Promitions_Object_Model_p1.png)

Perhaps you want to add a $5 promotion that will be valid for the next 10 days to incentivize the recipeint to spend their value. As you can see below, a new ValueStore is attached to Card. 

![Promotion Object Model Part2](http://resources.giftbit.com/api/embeddedimages/Lightrail_Promitions_Object_Model_p2.png)

Suppose the recipient spends $8 USD within the 10 day limit. Below you can see how the balances of the ValueStore and in turn the balance of the Card is affected.

![Promotion Object Model Part3](http://resources.giftbit.com/api/embeddedimages/Lightrail_Promitions_Object_Model_p3.png)

This example illustrates that when Transactions are created against Cards that have multiple ValueStores, any valid ValueStore will be transacted against in order of expiry.

## Implementation Details

### Coding for Idempotency and the UserSuppliedId Field

The API is fully idempotent on the `userSuppliedId` field, which is a required parameter for all endpoint operations that result in a change of state on the Lightrail side (POST, PUT, PATCH).  
Therefore, in the case of a non-received response from the API or other unknown condition, it is safe and recommended to retry the request with the same `userSuppliedId`.

For example, your customer is using a Code in your checkout.  
You POST to the _/codes/{fullcode}/transactions_ endpoint to mark the use, but get a network timeout and are unable to process the response. 
As a result, your system doesn't know if Lightrail successfully received your POST and recorded the transaction. 
With idempotency, you do not need any lookups or other complicated error handling to see if the original API call succeeded. 

You can simply retry the same call (as many times as needed) with the same `userSuppliedId`, and get the same 200 response upon success whether or not a previous request went through. 
Our server will do the operation once and only once for that `userSuppliedId`.

Given the above, it is important you think about how to structure your `userSuppliedId`'s and error handling so that you are always sending a unique value for different logical requests, but the same one for any retries.  

Attempting to reuse a `userSuppliedId` but providing different request parameters will result in a 409 error.

### About Currency Value, Currency Type, and No-Currency Use (Such as Points)
Where currency type (eg. USD, CDN, AUD) is required or returned, the API expects/uses 3 character uppercase  codes conforming to the ISO-4217 standard. 
Lightrail does not do any currency conversion nor does currency influence internal behaviour; rather, currency allows you to issue and track cards in different currencies as you choose.

In all cases where value is concerned, you need to provide the amount in the smallest currency unit. 
For most, this is the amount in cents (or pence, penny, or similarly named unit). For example, to create a Card for USD1.00, you would set the initialValue=100 (100 cents).

For zero-decimal currencies, or use with non-currency applications such as points, use the regular whole denomination. 
For example, for ¥1, you should set initialValue=1 (1 JPY), since ¥1 is the smallest currency unit.

### About Dates
The API expects all dates in request parameters to conform to the ISO-8601 format, specifically "yyyy-MM-dd'T'HH:mm:ss.SSSZ".  You can see examples in this documentation.

This allows you to control things such as Code expiry in fine granularity to the timezone of your choosing. 
All responses will always be given in this same format.

### Handling Error Responses

Clients should always check the HTTP status code of the response and act accordingly if the response is not a 200.

Error response JSON will be in the following format:
- status: (number) - will match the HTTP response code.    
- message: (string, optional) - a descriptive error message if one is available
- code: (string, optional) - a code that can be provided to Lightrail support if troubleshooting help is needed

#### Example error responses:
| Status | Description         | Message                                                                                                                                          | 
|:-------|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------|
| `400`  | bad request         | Failed to create card due to error during code creation. Response from code creation: Bad Request. Missing Required Parameter 'initialValue'.    | 
| `401`  | unauthorized        | Unauthorized.                                                                                                                                    |
| `409`  | idempotency failure | A different transaction with the same userSuppliedId already exists.                                                                             |
| `429`  | throttled failure   | Too many requests.                                                              

### Legal Responsibilities
The Lightrail API provides flexibility to implement multiple currency solutions (gift cards, unique promo codes, credit refunds, etc). 
It is the responsibility of the API user and their organization to understand and follow the jurisdictions and laws that govern all aspects of their implementation.

## Ping and Health Check [/ping]
Use the /ping endpoint to check that your authorization is working correctly or to healthcheck the API. 


### Ping [GET]
+ Request (application/json)
    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200
    + Attributes (Healthcheck)
        
    + Body
    
            {
                "user": 
                {
                    "username":"example_merchant_account@yourdomain.com",
                    "servertime": "2016-09-08T18:44:02.124+0000",
                    "mode": "LIVE"
                }
            }
        
+ Response 401

        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }

## Cards [/cards/]
The _/cards_ endpoint is for use by your system to create and manage your Cards and Codes.
Cards represent a gift card, promotional offer, credit, or other means of eCommerce currency relevant to your 
business.  Every Card is created with a corresponding Code automatically.  You access details on both your 
Cards and your Codes through the cardId, which eliminates the need to ever store a fullcode.

### List Cards [GET /cards/{?limit}{?offset}{?categoryKey}{?categoryValue}{?contactId}]

Retrieve your created Cards.  Results are returned in descending order of creation (newest first).
+ Request (application/json)
    + Headers
    
             Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter 
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.
    + categoryKey (string, optional) - A key to a Category. Will return all Cards attached to Categories with 
      this key if supplied.
    + categoryValue (string, optional) - A value of a Category. Will return all Cards attached to Categories 
      with this value if supplied. If both a categoryKey and a categoryValue are supplied, will return all 
      Cards associated with the unique Category having that categoryKey and categoryValue.
    + contactId (string, optional) - A contactId to filter by.

+ Response 200
    + Attributes 
        + cards (array[CardResponse])

    + Body
    
            {
                "cards":[
                    {
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1234",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-4e61aba2-5d5a-4e99-8574-6479cecce0dd",
                    "dateCreated": "2016-09-01T23:42:35.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1235",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-3c83dc55-63e1-4148-8ed7-501bcf2aff5d",
                    "dateCreated": "2016-09-01T23:42:23.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1236",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-c8dc87a7-7739-403f-8aa7-6c995d7a1d29",
                    "dateCreated": "2016-09-01T23:42:17.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1237",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-56d23f04-64a8-452b-b3a1-3e758ebb6adc",
                    "dateCreated": "2016-09-01T23:41:32.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1238",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    }
                ],
                "pagination":{
                    "count": 5,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 5
                }
            }

### Retrieve Card by cardId [GET /cards/{cardId}]

Look up a single Card by by the Lightrail assigned cardId.

+ Parameters 
    + cardId (string, required) - The Lightrail assigned cardId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Attributes 
        + card (CardResponse)

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                }
            }

### Create Account Card [POST /cards]

+ Request (application/json)
The categories object is optional. If provided, it will attach the given Category objects to the Card, 
creating any that do not exist already. The contactId string is also optional; it must correspond to one 
of your Contacts' contactId fields.

    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes (CardRequest)

    + Body
    
            {
                "userSuppliedId": "12345678",
                "code":
                {
                    "initialValue":5000,
                    "programId":"program-a0d2fda60d13448fba0efdd61733c412",
                },
                "categories":
                {
                    "giftbit_order": "My Order",
                    "My Custom Category Key": "My Custom Category Value"
                },
                "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d48"
            }
        
+ Response 200
    + Attributes
        + Card (CardResponse)
        
    + Body
            
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            },
                            {
                                "categoryId": "category-8b3b5f3e502a43d789fd6d88296c4a22",
                                "key": "giftbit_program",
                                "value": "program-6cb2f3b117b44eb5986ac8cf36b59125"
                            }
                        ]
                }
            }

### Create Gift Card [POST /cards]

+ Request (application/json)
The categories object is optional. If provided, it will attach the given Category objects to the Card, 
creating any that do not exist already. The contactId string is also optional; it must correspond to one 
of your Contacts' contactId fields.

    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes (CardRequest)

    + Body
    
            {
                "userSuppliedId": "12345678",
                "code":
                {
                    "initialValue":5000,
                    "programId":"program-a0d2fda60d13448fba0efdd61733c412",
                },
                "categories":
                {
                    "giftbit_order": "My Order",
                    "My Custom Category Key": "My Custom Category Value"
                },
                "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d48"
            }
        
+ Response 200
    + Attributes
        + Card (CardResponse)
        
    + Body
            
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            },
                            {
                                "categoryId": "category-8b3b5f3e502a43d789fd6d88296c4a22",
                                "key": "giftbit_program",
                                "value": "program-6cb2f3b117b44eb5986ac8cf36b59125"
                            }
                        ]
                }
            }

### Retrieve fullcode [GET /cards/{cardId}/fullcode]

After creating a Card, use this endpoint to retrieve the fullcode to give to your recipient.  This is the code worth value to your organization; do not store this code in your database or other parts of your system.  If you are tracking recipients, associate your recipient with the cardId.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
    
            {
                "fullcode":{
                    "code" : "GFBT-ABCDE-FGHIJK-LMNOP-12345"
                }
            }

### Update [PATCH /cards/{cardId}]

Update the contact on a Card by the Lightrail assigned cardId. The contactId must correspond to one of your 
Contacts' contactIds. 

+ Parameters 
    + cardId (string, required) - The Lightrail assigned cardId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
    + Attributes
        + contactId (string, required) - The Contact's unique identifier which you'd like to update the card with.
            
    + Body
    
            {
                "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49"
            }

+ Response 200

    + Attributes 
        + card (CardResponse)

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            },
                            {
                                "categoryId": "category-8b3b5f3e502a43d789fd6d88296c4a22",
                                "key": "giftbit_program",
                                "value": "program-6cb2f3b117b44eb5986ac8cf36b59125"
                            }
                        ]
                }
            }            

### Activate Card [POST /cards/{cardId}/activate]

### Freeze Card [POST /cards/{cardId}/freeze]

### Unfreeze Card [POST /cards/{cardId}/unfreeze]

### Cancel Card [POST /cards/{cardId}/cancel]

## Contacts [/contacts]

A Contact represents a recipient of one of your Cards or Codes. Contacts can be attached to Cards to help you 
keep track of who is interacting with your Cards.

### List Contacts [GET /contacts{?limit}{?offset}{?email}{?firstName}{?lastName}{?userSuppliedId}]

Retrieve a list of your created Contacts.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      Default 0.
    + email (string, optional)
    + firstName (string, optional)
    + lastName (string, optional)
    + userSuppliedId (string, optional) - The unique ID supplied on Contact creation.
    
+ Response 200
    + Attributes
        + contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist 
          this value for future operations.
        + userSuppliedId (string, required) - The unique ID supplied on Contact creation.
        + dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
        + email (string) - The provided email, if applicable.
        + firstName (string) - The provided firstName, if applicable.
        + lastName (string) - The provided lastName, if applicable.

    + Body
    
            {
                "contacts":[
                    {
                        "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                        "userSuppliedId": "12345678",
                        "email": "noreply@giftbit.com",
                        "firstName": "Jane",
                        "lastName": "Smith",
                        "dateCreated": "2016-12-09T00:06:00.000+0000"
                    },
                    {
                        "contactId": "contact-1f06b54b9fa44727a7ba7043de5365ce",
                        "userSuppliedId": "12345679",
                        "email": "noreply@giftbit.com",
                        "firstName": "John",
                        "lastName": "Smith",
                        "dateCreated": "2016-12-09T00:06:00.000+0000"
                    }
                ]
            }

### Show Contact [GET /contacts/{contactId}]

Look up a Contact given its contactId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + contactId (string, required) - The contactId provided on Contact creation.
    
+ Response 200
    + Attributes
        + contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist 
          this value for future operations.
        + userSuppliedId (string, required) - The unique ID supplied on Contact creation.
        + dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
        + email (string) - The provided email, if applicable.
        + firstName (string) - The provided firstName, if applicable.
        + lastName (string) - The provided lastName, if applicable.

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }

### Create Contact [POST /contacts]

Create a new Contact. Once created, a Contact can be attached to a Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes (ContactRequest)
            
    + Body
    
            {
                "userSuppliedId": "12345678",
                "email": "noreply@giftbit.com"
            }
        

    
+ Response 200
    + Attributes (Contact)

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": null,
                    "lastName": null,
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }

### Update Contact [PATCH /contacts/{contactId}/]

Update a Contact. A Contact's email, firstName, or lastName can be updated.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
    + Attributes (ContactRequest)
            
    + Body
    
            {
                "firstName": "Jane",
                "lastName": "Smith"
            }
    
+ Response 200
    + Attributes (Contact)

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }

### Delete Contact [DELETE /contacts/{contactId}]

Delete a Contact. Contact will not appear when listing Contacts.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + contactId (string, required) - The contactId provided on Contact creation.
    
+ Response 204

### Retrieve Account Cards for Contact [GET /cards?contactId=123&cardType=ACCOUNT_CARD]

Look up a Accounts for a contactId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + contactId (string, required) - The contactId provided on Contact creation.
    
+ Response 200
    + Attributes
        + Card (CardResponse)

    + Body
    
            {
                "cards":[
                    {
                        "dateCreated": "2017-05-09T17:07:23.675+0000",
                        "contactId": "contact-4ffe2b27f2e046179094b2c7828287d4",
                        "cardId": "card-3809c739c532401d908ee7b2ea061276",
                        "userSuppliedId": "account-XXX-contact-4ffe2b27f2e046179094b2c7828287d4-user-d74d948ab0524f63995322bfe4981942-TEST",
                        "categories":[{"value": "program-account-XXX-user-d74d948ab0524f63995322bfe4981942-TEST", "categoryId": "category-049bfe85b3df46a8b55e0efd95355643",…]
                    },
                    {
                        "dateCreated": "2017-05-09T16:43:40.893+0000",
                        "contactId": "contact-4ffe2b27f2e046179094b2c7828287d4",
                        "cardId": "card-89d8e3196abd47c5951e025309e66c42",
                        "userSuppliedId": "account-USD-contact-4ffe2b27f2e046179094b2c7828287d4-user-d74d948ab0524f63995322bfe4981942-TEST",
                        "categories":[{"value": "account", "categoryId": "category-a1a37522f2634792b1e8ca7558235ace", "key": "giftbit_cardtype"…]
                    }
                ]
            }
            
## Transactions [/cards/{cardId}/transactions]

### List Transactions [GET /cards/{cardId}/transactions]
+ Response 200

### Show Transaction [GET /cards/{cardId}/transactions/{transactionId}]
+ Response 200

### Create Transaction [POST /cards/{cardId}/transactions]
+ Response 200

### Capture Transaction [POST /cards/{cardId}/transactions/{transactionId}/capture]
+ Response 200

### Void Transaction [POST /cards/{cardId}/transactions/{transactionId}/void]
+ Response 200

## Codes [/codes/{fullcode}/transactions]

### List Transactions [GET /codes/{fullcode}/transactions]
+ Response 200

### Show Transaction [GET /codes/{fullcode}/transactions/{transactionId}]
+ Response 200

### Create Transaction [POST /codes/{fullcode}/transactions]
+ Response 200

## ValueStores: Managing Promotions [/cards/{cardId}/valueStores/]

### List ValueStores [GET /cards/{cardId}/valueStores]
+ Response 200

### Show ValueStore [GET /cards/{cardId}/valueStores/{valueStoreId}]
+ Response 200

### Create ValueStore [POST /cards/{cardId}/valueStores]
+ Response 200

### Activate ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/actiave]
+ Response 200

### Freeze ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/freeze]
+ Response 200

### Unfreeze ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/unfreeze]
+ Response 200

### Cancel ValueStore [POST /cards/{cardId}/valueStores/{valueStoreId}/cancel]
+ Response 200

## Balances [/cards/{cardId}/balanceDetails/]

### Get BalanceDetails by cardId [GET /cards/{cardId}/balanceDetails]
+ Response 200

### Get BalanceDetails by fullcode [GET /codes/{fullcode}/balanceDetails]
+ Response 200

### Get Balance by cardId (Deprecated) [GET /cards/{cardId}/balanceDetails]

+ Response 200

### Get Balance by fullcode (Deprecated) [GET /codes/{fullcode}/balanceDetails]
+ Response 200

## Categories [/categories/]

### List Categories [GET /categories]
+ Response 200

### List Categories on Card [GET /cards/{cardId}/categories]
+ Response 200

## Programs [/programs/]

### List Programs [GET /programs]
+ Response 200

# Data Structures

## Pagination (object)
+ limit (number, optional) - The maximum number of results to return at once. Default 100.
+ offset (number, optional) - The offset of the first results in the total results. Default 0.

## PaginationResponse (Pagination) ]
+ count (number, required)
+ limit  (number, required)
+ maxLimit  (number, required)
+ offset  (number, required)
+ totalCount  (number, required)

## IdempotentObject (object)
+ userSuppliedId (string, required) - The unique identifier provided when this call was made. 

## Code (object)
+ currency (string, required) - The 3 character ISO-4217 currency.
+ initialValue (number, required) - The value of the code at creation in the smallest currency unit 
  (such as cents).
+ programId (string, required) - The id of the Program for which the code will be created from.
+ expires (string, optional) - The code's expiry date and time.  This field will be ommitted if the 
  code was not created with an expiry.  ISO-8601 format.
+ startDate (string, optional) - The code's start date and time.  This field will be ommitted if 
  the code was not created with an start date.  ISO-8601 format.
+ metadata (object) - A collection of key/value pairs of additional information about the code. 
  The `giftbit_*` namespace for keys is reserved. 

## CodeResponse (Code)
+ codeLast4 (string) - The last 4 characters of the Code.
+ dateCreated (string) - The Lightrail system time of the creation in ISO-8601 format.
+ expires (string) - The code's expiry date and time.  This field will be ommitted 
  if the code was not created with an expiry.  ISO-8601 format.

## CodeRequest
+ initialValue (number) - the starting value of the code, in the smallest currency unit (such as cents).
+ startDate (string) - The code's optional start date and time.  ISO-8601 format.
+ programId (string) - The id of the Program for which the code will be created from.

## Card (IdempotentObject)

## CardRequest (Card)
+ userSuppliedId (string, required)
+ code (CodeRequest, required)
+ categories (Category)
+ contactId (string) - Lightrail's unique identifier for the Contact. Note, the Contact must be created before the request to create the card.

## CardResponse (Card)
+ cardId (string, required) - Lightrail's unique identifier for this Card. Be sure to persist this 
  value for future operations.
+ userSuppliedId (string, required) - The userSuppliedId provided at Card creation.
+ contactId (string)
+ dateCreated (string, required) - The Lightrail system time of the creation in ISO-8601 format.
+ categories (object) - The Categories associated with this Card. 

## Transaction (IdempotentObject)
+ value (number, required) - The amount of the transaction in the smallest currency unit (such as cents). 
  A transaction cannot reduce the code balance below 0
+ currency  (string, required) The 3 character ISO-4217 currency code.  The supplied currency must match 
  the currency of code when it was created.
+ metadata (object) - A collection of key/value pairs of additional information about the transaction. 
  The `giftbit_*` namespace for keys is reserved.

## TransactionRequest (Transaction) 

## TransactionResponse (Transaction) 
+ dateCreated(string, required) - Lightrail system time of the creation of the transaction. ISO-8601 format.
+ valueAvailableAfterTransaction(number, required) - The remaining balance of the `Code` as a result of 
  the transaction in the smallest currency unit (such as cents).

## Category (object)
+ categoryKey (string) - The key of the category. Examples: "giftbit_order", "city"
+ categoryValue (string) - The value of the category. Examples: "My Order", "san francisco"

## CategoryResponse (object)
+ categoryId (string) - Lightrail's unique identifier for this Category
+ key (string) - The key of the category.
+ value (string) - The value of the category.

## BalanceResponse (object)
+ currentValue (number) - The current balance of the Code.

## Healthcheck (object)
+ username (string) - The email address associated with the credentials provided.
+ servertime (string) - The current time on the server (ISO 8601 format).
+ mode (string) - String indicating whether the credentials provided are for TEST or LIVE mode.

## ContactRequest (object)
+ userSuppliedId (string, required) - This must be unique.
+ email (string) - Optional.
+ firstName (string) - Optional.
+ lastName (string) - Optional.

## Contact (object)
+ contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist this value for future operations.
+ userSuppliedId (string, required) - The unique ID supplied on Contact creation.
+ dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
+ email (string) - The provided email, if applicable.
+ firstName (string) - The provided firstName, if applicable.
+ lastName (string) - The provided lastName, if applicable.