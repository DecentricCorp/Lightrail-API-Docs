FORMAT: 1A
HOST: https://api.lightrail.com/v1/

# Lightrail API

Building into Lightrail's RESTful API gives you a complete and powerful e-commerce value
solution for your business to easily power gift cards, promotions, credits, points programs and more.

Contact Lightrail anytime at `hello@lightrail.com` for technical, use case exploration, or general 
assistance - we are here to help you build the right solution.

## Reporting Errors or Suggestions

This interactive documentation will provide full code samples in many popular languages and let you 
try out all functionality.

The API Blueprint file that produces this documentation is in GitHub at https://github.com/Giftbit/Lightrail-API-Docs. 
If you find a mistake or have a suggestion for improvement, please submit it directly via pull request.

## API Base URL

The base URL for Lightrail's API is <em>https://api.lightrail.com/v1/</em>.

## Account Creation and Authorization

You'll need your test or production `access_token` from your Lightrail account details page 
to use the API. If you don't already have an account, you can contact us to request a demo
<em><a href="http://info.giftbit.com/currency/request-a-demo" target="_blank">here</a></em>. 
Be sure to store your production `access_token` extremely securely in your production configurations.

Note in your account settings you can toggle to a test mode which provides you with a test `access_token`. 
This allows you to make calls to the API without affecting your Cards or the calculated statistics in live mode.
Emails sent from test mode will be labeled as such.

You authenticate with your `access_token` by including your token prefixed by the word ‘Bearer’ (case sensitive) 
and a space in the Authorization HTTP header. For example `Authorization: Bearer {access_token}`.

## Understanding the API: The Relationship Between Programs, Cards, and Codes

### Programs

Programs define a set of rules from which a Card can be created. 
They are created within the <a href="https://www.lightrail.com/app/#/programs" target="_blank">Programs</a> section of the Lightrail web application. 
Programs are used to structure and organize related Cards, and also improve tracking of activity within your account. 
Cards created in a Program follow the rules of the Program including details such as currency, permitted denominations or range of value, and card lifespan. 
Use of Programs is required in order to create Cards.


Programs also provide the flexibility to add integrators. 
Adding integrators allows you to lend permission so another party can create and issue Cards according to the rules of your Program. 
When an integrator is added to a Program it creates an additional `access_token` which your integrator  will use in API requests to Lightrail. 
An Integrator's access is restricted to a Program. The integrator’s activity is tracked and managed through Lightrail.

### Cards and Codes

The API is structured around two main endpoints and their corresponding concepts: Cards and Codes. 

A Card represents a unique gift card, promotional code, credit, or other type of value that your business wishes 
to issue. A Card is the object that your system will interact with following your implementation 
(creation, retrieval, listing, statistics, etc).

A Code is the unique financial device associated with a Card. 
A Code has a `fullcode` that is a unique and unguessable alpha-numeric code that can be distributed to a recipient. 
A Code also has a balance, an optional expiry and metadata. Transactions and adjustments of the balance are associated with the Code. 
Your consumer-facing functionality (checkout, balance check, transaction history for a code) interacts with the _/code_ endpoint.

There is a 1-1 relationship between a Card and a Code. You specify the details of the Code when you create the 
Card and must supply the `programId` as a field of the Code object in the request. 
Lightrail plans to add extensive functionality to Card including automated delivery mechanisms, templating, 
external integrations, and more - hence the separation from Code.

## Common Use Cases

### Creating and Accepting Codes in Your Checkout

A common use case for this API is one in which Lightrail powers your gift cards. 
You would create one or more Programs which define the rules for the creation of your gift cards.
Then you would create a Card with an attached Code, which contains the value which you wish to send as well as the date you would 
like the code to expire (if applicable). You would then deliver the `fullcode` associated with this Code to 
your recipient, and allow the recipient to redeem value against this Code in one or more transactions. You 
can also allow the user to see the usage history or balance remaining on their Code at any time.

The steps and API calls you would take in this use case are: 
- Create a Program through your Lightrail account.
- If you want to create Cards on demand via the API:
    - Create one or more new Card(s) with associated Code(s) (POST _/cards_). Make sure you keep the returned 
      `cardId`(s).
    - Retrieve the `fullcode` for each code using the `cardId` to deliver to your recipient 
      (GET _/cards/{cardId}/code/fullcode_).
- Accept the fullcode in your checkout, and create a Transaction on the Code 
  (POST _/codes/{fullcode}/transactions_).
- Check the remaining value associated with the `fullcode` and display to your recipient 
  (GET _/codes/{fullcode}/balance_).

#### High level architecture diagram

![High level architecture](http://resources.giftbit.com/api/embeddedimages/lightrail-api-high-level-architecture-diagram.png)

### Building a Points Accumulation System for Your Users
Another common use case for this API is to power a points/rewards accumulation system for your user/application 
ecosystem.  In this example, you are not distributing or making use of Codes at all, but rather using the Cards 
endpoint exclusively to maintain points for your users.

The steps and API calls you would take in this use case are:  
- Create a Program though your Lightrail account which will represent your points accumulation system.
- Create a new Contact (POST _/contacts_) with your user's details. Make sure you keep the returned `contactId`.
- Create a new Card (POST _/cards_), including the `contactId` from above to associate that Card with your Contact. 
  Make sure you keep the returned `cardId` for future transactions.
- Every time you wish to adjust the user's points or permit redemption of points, create an appropriate transaction 
  (POST _cards/{cardId}/code/transactions_).
- Check the remaining value associated with the `cardId` and display to your recipient 
  (GET _/cards/{cardId}/code/balance_).

Note that in this example, you do everything through the `cardId` and do not need to use the Code endpoint.

If this use case fits your need, a great way to reward your users for appropriate points milestones is to 
send them gift cards to top brands through <a href="https://www.giftbit.com" target="_blank">Giftbit’s Rewards API.</a>

## Coding for Idempotency and the UserSuppliedId Field

The API is fully idempotent on the `userSuppliedId` field, which is a required parameter for all endpoint 
operations that result in a change of state on the Lightrail side (POST, PUT, PATCH).  Therefore, in the case 
of a non-received response from the API or other unknown condition, it is safe and recommended to retry the 
request with the same `userSuppliedId`.

For example, your customer is using a Code in your checkout.  You POST to the _/codes/{fullcode}/transactions_ 
endpoint to mark the use, but get a network timeout and are unable to process the response. As a result, your 
system doesn't know if Lightrail successfully received your POST and recorded the transaction.  With idempotency, 
you do not need any lookups or other complicated error handling to see if the original API call succeeded. 
You can simply retry the same call (as many times as needed) with the same `userSuppliedId`, and get the same 
200 response upon success whether or not a previous request went through. Our server will do the operation once
and only once for that `userSuppliedId`.

Given the above, it is important you think about how to structure your `userSuppliedId`'s and error handling so 
that you are always sending a unique value for different logical requests, but the same one for any retries.  

Attempting to reuse a `userSuppliedId` but providing different request parameters will result in a 409 error.

Note that `userSuppliedId`'s are considered per endpoint and do not need to be unique across different endpoints.

## Contacts

A Contact represents a recipient of one of your Cards.
Contacts can be attached to Cards to improve tracking and to enable targeting of promotions based on customer behavior.
Use of Contacts is optional.

A Contact has an email address, an optional first and/or last name and optional identifiers such as your system’s customer ID. 


## The Category Field on Card

A Category is an identifier that can be attached in a many-to-many relationship with Cards. A Category 
consists of key-value pair of strings. For example, one category might be `{"campaign": "first campaign"}`. 
All of the statistics that Lightrail tracks are grouped by Category, so setting good Categories on your Cards 
will ensure you get the stats you are looking for. Suppose you wanted to compare statistics across 
campaigns. You could set a `{"campaign": "first campaign"}` Category on one group of Cards, and a 
`{"campaign": "second campaign"}` on another. Each would have their own set of statistics calculated for them.

You'll notice Lightrail automatically adds several reserved Categories during Card creation such as `giftbit_order` and `giftbit_program`.
The Category `giftbit_order` is the default grouping of Cards, and is assigned either through the web portal or the _/cards_ endpoint; in this 
document, an Order refers to a group of Cards that are attached to the same `{"giftbit_order": "order name"}`
Category. These categories are added to provide statistics for aggregate groupings of cards.

## Handling Error Responses

Clients should always check the HTTP status code of the response and act accordingly if the response is not a 200.

Error response JSON will be in the following format:
- status: (number) - will match the HTTP response code.    
- message: (string, optional) - a descriptive error message if one is available
- code: (string, optional) - a code that can be provided to Lightrail support if troubleshooting help is needed

Example error responses:
### 400 (bad request)
        {
            "status": 400,
            "message": "Failed to create card due to error during code creation. 
                        Response from code creation: Bad Request. Missing Required Parameter 'initialValue'."
        }

### 401 (unauthorized)
        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }
        
### 409 (idempotency failure)
        {
            "status": 409,
            "message": "A different transaction with the same userSuppliedId already exists."
        }


## A Note on Security and Fullcodes

A fullcode is the property of a Code object that represents real value in your checkout. We have some 
recommended best practices around creating and accessing them:
 - Only retrieve the fullcode as returned by /cards/{cardId}/code/fullcode endpoint when you absolutely 
   need it, such as when you will distribute it to your recipient.  No other API calls will return the fullcode.
 - There is no need to ever store fullcodes in your system and we strongly recommend against doing so.  
   You should store the corresponding cardId upon creation for future reference and API calls.  All functionality only requires you to pass the fullcode through your system in a transient manner.

Note that Lightrail is a PCI compliant platform and we use all modern best practices around cryptography and 
access control to keep your codes safe.

## About Dates
The API expects all dates in request parameters to conform to the ISO-8601 format, specifically 
"yyyy-MM-dd'T'HH:mm:ss.SSSZ".  You can see examples in this documentation.
This allows you to control things such as Code expiry in fine granularity to the timezone of your choosing.
All responses will always be given in this same format converted to the UTC timezone (+0000)

## About Currency Value, Currency Type, and No-Currency Use (Such as Points)
Where currency type (eg. USD, CDN, AUD) is required or returned, the API expects/uses 3 character uppercase 
codes conforming to the ISO-4217 standard. Lightrail does not do any currency conversion nor does currency 
influence internal behaviour; rather, currency allows you to issue and track cards in different currencies 
as you choose.

In all cases where value is concerned, you need to provide the amount in the smallest currency unit. For most, 
this is the amount in cents (or pence, penny, or similarly named unit). For example, to create a Card for 
USD1.00, you would set the initialValue=100 (100 cents).

For zero-decimal currencies, or use with non-currency applications such as points, use the regular whole 
denomination. For example, for ¥1, you should set initialValue=1 (1 JPY), since ¥1 is the smallest currency unit.

### Using the API for points programs or similar non-currency applications.

If you wish to represent non-currency amounts in cards, use value of 'XXX' when currency is required. 
'XXX' is used in ISO-4217 to denote a transaction involving non-currency and our API supports this concept.

## Legal Responsibilities
The Lightrail API provides flexibility to implement multiple currency solutions (gift cards, unique 
promo codes, credit refunds, etc). It is the responsibility of the API user and their organization to 
understand and follow the jurisdictions and laws that govern all aspects of their implementation.

## Ping and Health Check [/ping]
Use the /ping endpoint to check that your authorization is working correctly or to healthcheck the API. 


### Ping [GET]
+ Request (application/json)
    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200
    + Attributes (Healthcheck)
        
    + Body
    
            {
                "user": 
                {
                    "username":"example_merchant_account@yourdomain.com",
                    "servertime": "2016-09-08T18:44:02.124+0000",
                    "mode": "LIVE"
                }
            }
        
+ Response 401

        {
            "status": 401,
            "message": "Unauthorized",
            "code": "CREDENTIALS_INVALID"
        }

## Cards [/cards/]
The _/cards_ endpoint is for use by your system to create and manage your Cards and Codes.
Cards represent a gift card, promotional offer, credit, or other means of eCommerce currency relevant to your 
business.  Every Card is created with a corresponding Code automatically.  You access details on both your 
Cards and your Codes through the cardId, which eliminates the need to ever store a fullcode.

### Create a Card and its Code [POST]

Create a Card and its corresponding Code.  Note that `cardId` on response should be persisted to lookup or 
interact with the Code. The Code is not returned as part of the response. The currency and expiry will automatically
be set from the Program that the card belongs to.

+ Request (application/json)
The categories object is optional. If provided, it will attach the given Category objects to the Card, 
creating any that do not exist already. The contactId string is also optional; it must correspond to one 
of your Contacts' contactId fields.

    + Headers

            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes (CardRequest)

    + Body
    
            {
                "userSuppliedId": "12345678",
                "code":
                {
                    "initialValue":5000,
                    "programId":"program-a0d2fda60d13448fba0efdd61733c412",
                },
                "categories":
                {
                    "giftbit_order": "My Order",
                    "My Custom Category Key": "My Custom Category Value"
                },
                "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d48"
            }
        
+ Response 200
    + Attributes
        + Card (CardResponse)
        
    + Body
            
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            },
                            {
                                "categoryId": "category-8b3b5f3e502a43d789fd6d88296c4a22",
                                "key": "giftbit_program",
                                "value": "program-6cb2f3b117b44eb5986ac8cf36b59125"
                            }
                        ]
                }
            }
    

### List Cards [GET /cards/{?limit}{?offset}{?categoryKey}{?categoryValue}{?contactId}]

Retrieve your created Cards.  Results are returned in descending order of creation (newest first).
+ Request (application/json)
    + Headers
    
             Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter 
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. Default 0.
    + categoryKey (string, optional) - A key to a Category. Will return all Cards attached to Categories with 
      this key if supplied.
    + categoryValue (string, optional) - A value of a Category. Will return all Cards attached to Categories 
      with this value if supplied. If both a categoryKey and a categoryValue are supplied, will return all 
      Cards associated with the unique Category having that categoryKey and categoryValue.
    + contactId (string, optional) - A contactId to filter by.

+ Response 200
    + Attributes 
        + cards (array[CardResponse])

    + Body
    
            {
                "cards":[
                    {
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1234",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-4e61aba2-5d5a-4e99-8574-6479cecce0dd",
                    "dateCreated": "2016-09-01T23:42:35.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1235",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-3c83dc55-63e1-4148-8ed7-501bcf2aff5d",
                    "dateCreated": "2016-09-01T23:42:23.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1236",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-c8dc87a7-7739-403f-8aa7-6c995d7a1d29",
                    "dateCreated": "2016-09-01T23:42:17.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1237",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    },
                    {
                    "cardId": "card-56d23f04-64a8-452b-b3a1-3e758ebb6adc",
                    "dateCreated": "2016-09-01T23:41:32.000+0000",
                    "contactId": null,
                    "userSuppliedId":"1238",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    }
                ],
                "pagination":{
                    "count": 5,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 5
                }
            }
    
### Retrieve Card by cardId [GET /cards/{cardId}]

Look up a single Card by by the Lightrail assigned cardId.

+ Parameters 
    + cardId (string, required) - The Lightrail assigned cardId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Attributes 
        + card (CardResponse)

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                }
            }
            
### Update Card by cardId [PATCH /cards/{cardId}]

Update the contact on a Card by the Lightrail assigned cardId. The contactId must correspond to one of your 
Contacts' contactIds. 

+ Parameters 
    + cardId (string, required) - The Lightrail assigned cardId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
    + Attributes
        + contactId (string, required) - The Contact's unique identifier which you'd like to update the card with.
            
    + Body
    
            {
                "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49"
            }

+ Response 200

    + Attributes 
        + card (CardResponse)

    + Body
        
            {
                "card":{
                    "userSuppliedId" : "1234",
                    "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                    "contactId": "contact-1d14ea54dbfd40c6a33476c7dbac2d49",
                    "dateCreated": "2016-09-01T23:47:02.000+0000",
                    "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            },
                            {
                                "categoryId": "category-8b3b5f3e502a43d789fd6d88296c4a22",
                                "key": "giftbit_program",
                                "value": "program-6cb2f3b117b44eb5986ac8cf36b59125"
                            }
                        ]
                }
            }
            
### Retrieve Card by userSuppliedId [GET /cards{?userSuppliedId}]

Look up a single Card by the userSuppliedId.
            
+ Parameters 
    + userSuppliedId (string) - The identifier that you supplied when you created the Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200
    + Attributes 
        + cards (array[CardResponse])
        + pagination(PaginationResponse)
        
    + Body
        
            {
                "cards":[
                    {
                        "userSuppliedId" : "1234",
                        "cardId": "card-8f893901-c143-4def-9124-bd0c25a0c3a8",
                        "dateCreated": "2016-09-01T23:47:02.000+0000",
                        "categories":[
                            {
                                "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                                "key": "someCategoryKey",
                                "value": "someCategoryValue"
                            }, 
                            {
                                "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                                "key": "giftbit_order",
                                "value": "my order name"
                            }
                        ]
                    }
                ]
            }
    

### Retrieve Categories by cardId [GET /cards/{cardId}/categories]

After creating a Card, use this endpoint to retrieve all Categories associated with that Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
        
+ Response 200
    + Attributes 
        + cards (array[CategoryResponse])

    + Body
    
            {
                "categories":[
                    {
                        "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                        "key": "someCategoryKey",
                        "value": "someCategoryValue"
                    }, 
                    {
                        "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                        "key": "giftbit_order",
                        "value": "my order name"
                    }
                ]
            }
            
### Retrieve a fullcode by cardId [GET /cards/{cardId}/code/fullcode]

After creating a Card, use this endpoint to retrieve the fullcode to give to your recipient.  This is the code worth value to your organization; do not store this code in your database or other parts of your system.  If you are tracking recipients, associate your recipient with the cardId.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Response 200

    + Body
    
            {
                "fullcode":{
                    "code" : "GFBT-ABCDE-FGHIJK-LMNOP-12345"
                }
            }

### Retrieve a Code by cardId [GET /cards/{cardId}/code]

Use this endpoint if your system or internal staff need to retrieve basic information about a Code. 

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200
    
    + Attributes 
        + code(CodeResponse)
    
    + Body
    
            {
                "code":{
                    "currency": "CAD",
                    "initialValue": 5000,
                    "codeLastFour": "WXYZ",
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "expires": "2017-03-03T08:00:00.000+0000"
                }
            }

### Retrieve a Code balance by cardId [GET /cards/{cardId}/code/balance]

Use this endpoint if your system or internal staff need to retrieve up-to-date balance information about a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }

### Retrieve Transactions for a Code by cardId [GET /cards/{cardId}/code/transactions/]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Response 200
    + Attributes 
        + transactions(array[TransactionResponse])
        + pagination(PaginationResponse)

    + Body
        
            {
                "transactions":[
                    {
                        "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                        "value": 500,
                        "valueAvailableAfterTransaction": 500,
                        "userSuppliedId": "someTransaction",
                        "dateCreated": "2016-08-10T09:00:00.000+0000"
                    }
                ],
                "pagination":{
                    "count": 1,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 1
                }
            }
    
### Retrieve a single Transaction for a code by cardId and transactionId [GET /cards/{cardId}/code/transactions/{transactionId}]

Use this endpoint if your system or internal staff need to retrieve all the Transactions for a Code.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    + transactionId (string) - The identifier returned when the Transaction was created.
    
+ Response 200
    + Attributes 
        + transaction(TransactionResponse)
        
    + Body
            
            {
                "transaction" {
                    "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                    "value": 500,
                    "valueAvailableAfterTransaction": 500,
                    "userSuppliedId": "someTransaction",
                    "dateCreated": "2016-08-10T09:00:00.000+0000"
                }
            }
    
### Create a Transaction for a Code given the cardId [POST /cards/{cardId}/code/transactions]

Use this endpoint if your system or internal staff need to create a Transaction for a Code, such as to mark 
all or part of it as used or to add additional value to the Code. 

To transact against the Code in your checkout or when a recipient presents their `fullcode`, see the 
`Create a Transaction by Fullcode` below.

+ Parameters 
    + cardId (string) - The identifier returned when the Card and Code were created.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes (TransactionRequest)
        
    + Body
    
            {
            "value": -250,
            "currency": "CAD",
            "userSuppliedId": "someTransaction"
            }
        
+ Response 200

    + Attributes 
        + transaction(TransactionResponse)

    + Body
    
            {
                "transaction" {
                    "transactionId": "transaction-86251f7b040b45d3b7364bae04c74870",
                    "value": -250,
                    "valueAvailableAfterTransaction": 4750,
                    "userSuppliedId": "someTransaction",
                    "dateCreated": "2016-08-10T09:00:00.000+0000"
                }
            }
    

## Categories [/categories/]

A Category represents a grouping of Cards e.g. orders, types of cards, or any custom Category you wish to create.
Most functions of Categories are closely tied to Cards.

### List your existing Categories [GET /categories/{?categoryKey}{?categoryValue}{?limit}{?offset}]

Retrieve a list of Categories that have been created.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
        
+ Response 200
    + Body
    
            {
                "categories":[
                    {
                        "categoryId": "category-333c93e4cf1c46d1b830253b6c5780f1",
                        "key": "someCategoryKey",
                        "value": "someCategoryValue"
                    }, 
                    {
                        "categoryId": "category-5f17d4f6b2924970a63877dbde6248fb",
                        "key": "giftbit_order",
                        "value": "my order name"
                    }
                ]
            }

## Contacts [/contacts]

A Contact represents a recipient of one of your Cards or Codes. Contacts can be attached to Cards to help you 
keep track of who is interacting with your Cards.

### Create Contact [POST /contacts]

Create a new Contact. Once created, a Contact can be attached to a Card.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
    + Attributes (ContactRequest)
            
    + Body
    
            {
                "userSuppliedId": "12345678",
                "email": "noreply@giftbit.com"
            }
        

    
+ Response 200
    + Attributes (Contact)

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": null,
                    "lastName": null,
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }

### Update Contact [PATCH /contacts/{contactId}/]

Update a Contact. A Contact's email, firstName, or lastName can be updated.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
    + Attributes (ContactRequest)
            
    + Body
    
            {
                "firstName": "Jane",
                "lastName": "Smith"
            }
    
+ Response 200
    + Attributes (Contact)

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }

### List Contacts [GET /contacts{?limit}{?offset}{?email}{?firstName}{?lastName}{?userSuppliedId}]

Retrieve a list of your created Contacts.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      Default 0.
    + email (string, optional)
    + firstName (string, optional)
    + lastName (string, optional)
    + userSuppliedId (string, optional) - The unique ID supplied on Contact creation.
    
+ Response 200
    + Attributes
        + contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist 
          this value for future operations.
        + userSuppliedId (string, required) - The unique ID supplied on Contact creation.
        + dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
        + email (string) - The provided email, if applicable.
        + firstName (string) - The provided firstName, if applicable.
        + lastName (string) - The provided lastName, if applicable.

    + Body
    
            {
                "contacts":[
                    {
                        "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                        "userSuppliedId": "12345678",
                        "email": "noreply@giftbit.com",
                        "firstName": "Jane",
                        "lastName": "Smith",
                        "dateCreated": "2016-12-09T00:06:00.000+0000"
                    },
                    {
                        "contactId": "contact-1f06b54b9fa44727a7ba7043de5365ce",
                        "userSuppliedId": "12345679",
                        "email": "noreply@giftbit.com",
                        "firstName": "John",
                        "lastName": "Smith",
                        "dateCreated": "2016-12-09T00:06:00.000+0000"
                    }
                ]
            }

### Show Contact [GET /contacts/{contactId}]

Look up a Contact given its contactId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + contactId (string, required) - The contactId provided on Contact creation.
    
+ Response 200
    + Attributes
        + contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist 
          this value for future operations.
        + userSuppliedId (string, required) - The unique ID supplied on Contact creation.
        + dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
        + email (string) - The provided email, if applicable.
        + firstName (string) - The provided firstName, if applicable.
        + lastName (string) - The provided lastName, if applicable.

    + Body
    
            {
                "contact":
                {
                    "contactId": "contact-0f06b54b9fa44727a7ba7043de5365cf",
                    "userSuppliedId": "12345678",
                    "email": "noreply@giftbit.com",
                    "firstName": "Jane",
                    "lastName": "Smith",
                    "dateCreated": "2016-12-09T00:06:00.000+0000"
                }
            }
            
### Delete Contact [DELETE /contacts/{contactId}]

Delete a Contact. Contact will not appear when listing Contacts.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Parameters 
    + contactId (string, required) - The contactId provided on Contact creation.
    
+ Response 204

## Codes [/codes/{fullcode}]

A Code represents the financial device that is worth value to you and your store.  The fullcode is what is 
distributed to your recipients. Your external-facing experience (balance checks, transaction history, and checkout/use of value) should interact with the Code and Code Transaction endpoints described here.  Only these endpoints accept fullcodes.

You are never required to store the fullcode internally in your system, and we recommend for security that 
you do not.  You may interact internally (for customer support) with a Code through its corresponding cardId 
as described in the 'Card' reference.


### Retrieve basic Code information [GET]

Look up information about a code given the fullcode.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Parameters 
    + fullcode (string) - The code given to the customer.
    
+ Response 200
    + Attributes
        + Code (CodeResponse)

    + Body
    
            {
                "code":
                {
                    "codeLast4": "BF8Z",
                    "currency":"USD",
                    "initialValue":2500,
                    "expires":"2020-08-06T08:00:00.000+0000",
                    "dateCreated":"2016-08-10T08:00:00.000+0000"
                }
            }


### Retrieve Code balance [GET /codes/{fullcode}/balance]

Retrieve the balance of a Code considering all previous Transactions.  

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameters 
    + fullcode (string) - the fullcode associated with the Code object and value given to the customer.
    
+ Response 200

    + Body
    
            {
                "balance":{
                    "currentValue": 200
                }
            }

### Create a Transaction by Fullcode [POST /codes/{fullcode}/transactions] 

Use some or all of the remaining value of the Code (create a Transaction on the Code). This endpoint is 
useful when you are provided the `fullcode` by the recipient any they wish to use some or all of the Code's 
value (eg. in your checkout).

You can only reduce the balance of the Code when transacting by with `fullcode`. If you wish to add value 
to the Code, create the transaction by the `cardId` as described above. 

Attempting to use value for a Code that is expired or does not have enough remaining value will result in 
400 response.

+ Parameters 
    + fullcode (string) - The gift code.
    
+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

    + Attributes
        + value (number, required) - The amount the transaction will change the balance on the Code in the 
          smallest currency unit (such as cents).  Must be a negative number. If the transaction amount would 
          bring the Code balance below zero, a 400 response will be returned.
        + currency  (string, required) The 3 character ISO-4217 currency code.  The supplied currency must 
          match the currency of code when it was created or an error will result.
        + userSuppliedId (string, required) - A unique identifier for this transaction.

    + Body
    
            {
                "userSuppliedId": "12345678",
                "value": -165,
                "currency": "USD"
            }

+ Response 200

    + Attributes
        + value (number) - The amount of the transaction in the smallest currency unit (such as cents). 
          Equal to the value in the request.
        + transactionId (string) - The unique Id for this transaction assigned by Lightrail at creation time.
        + userSuppliedId (string) - Identifier of the transaction (should equal transactionId in the request).
        + valueAvailableAfterTransaction (number) - The remaining balance of the Code as a result of the 
          transaction, at the time of the transaction.
        + dateCreated (string) - The Lightrail system time of the creation in ISO-8601 format.

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": -165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
        
### Retrieve all Transactions for a Code [GET /codes/{fullcode}/transactions/{?limit}{?offset}]

Retrieve all Transactions for a Code given the fullcode.  Useful if you'd like to show a recipient their 
code usage history.  Results are returned in descending order of creation (newest first).

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
   
+ Parameter
    + limit (number, optional) - For pagination.  The maximum number of results to return at once. Default 100.
    + offset (number, optional) - For pagination. The offset of the first results in the total results. 
      Default 0.
+ Response 200

    + Body
    
            {
                "transactions":[
                    {
                        "userSuppliedId": "12345",
                        "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                        "value": -500,
                        "dateCreated": "2016-08-11T08:32:00.000+0000",
                        "valueAvailableAfterTransaction": 800
                    },
                    {
                        "userSuppliedId": "12344",
                        "transactionId":"transaction-avji1b55-6gu7-4ke5-82s5-fd37edb5ju9a",
                        "value": -700,
                        "dateCreated": "2016-08-10T08:00:00.000+0000",
                        "valueAvailableAfterTransaction": 1300
                    }
                ],
                "pagination":{
                    "count": 2,
                    "limit": 100,
                    "maxLimit": 1000,
                    "offset": 0,
                    "totalCount": 2
                }
            }
    
### Retrieve a single Transaction for a Code using the transactionId [GET /codes/{fullcode}/transactions/{transactionId}]

Retrieve a Transaction for a Code given the fullcode and the transactionId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Response 200
    + Attributes 
        + transaction(TransactionResponse)
    
    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": -165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }

### Retrieve a single Transaction for a Code using the userSuppliedId [GET /codes/{fullcode}/transactions?userSuppliedId={userSuppliedId}]

Retrieve a Transaction for a Code given the fullcode and the userSuppliedId.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
+ Response 200
    + Attributes 
        + transaction(TransactionResponse)

    + Body
    
            {
                "transaction":{
                    "userSuppliedId": "12345678",
                    "transactionId":"transaction-d7yc1b55-6de6-49e5-82d5-fd37edb5f8ea",
                    "value": -165,
                    "dateCreated": "2016-08-10T08:00:00.000+0000",
                    "valueAvailableAfterTransaction": 4835
                    }
                }
            }
            
            
## Programs [/programs/{programId}]

The _/programs_ endpoint can be used to retrieve the details of your Programs. 
As an integrator this endpoint can be used to view the details of the Programs you have access to.

### Retrieve by programId [GET /programs/{programId}]

Retrieve Program details by the `programId`.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>

+ Parameter
    + programId (string, required) - The `programId` of the Program you want to retrieve.
            
+ Response 200

    + Body
    
            {
               "program":{
                  "programId":"program-3c582fbbf3b34031a5894e4f2c2bfcc6",
                  "userSuppliedId":"5dcc0933-72d18da0-767a497b",
                  "name":"My Program!",
                  "active":true,
                  "currency":"USD",
                  "dateCreated":"2017-01-05T23:53:35.000+0000",
                  "programExpiresDate":null,
                  "programStartDate":"2017-01-05T23:52:57.000+0000",
                  "codeActivePeriodInDays":30,
                  "codeValueMin":100,
                  "codeValueMax":1000000,
                  "fixedCodeValues":null,
                  "metadata":{
                     "giftbit_description":""
                  }
               }
            }
            
            
### List Programs [GET /programs]

Used to list Program details. This endpoint can be used to lookup a `programId` rather than copying it from within your Lightrail account.

+ Request (application/json)
    + Headers
    
            Authorization: Bearer <YOUR_ACCESS_TOKEN>
            
+ Response 200

    + Body
    
            {
               "programs":[
                  {
                     "program":{
                        "programId":"program-3c582fbbf3b34031a5894e4f2c2bfcc6",
                        "userSuppliedId":"5dcc0933-72d18da0-767a497b",
                        "name":"My Program!",
                        "active":true,
                        "currency":"USD",
                        "dateCreated":"2017-01-05T23:53:35.000+0000",
                        "programExpiresDate":null,
                        "programStartDate":"2017-01-05T23:52:57.000+0000",
                        "codeActivePeriodInDays":30,
                        "codeValueMin":100,
                        "codeValueMax":1000000,
                        "fixedCodeValues":null,
                        "metadata":null
                     }
                  },
                  {
                     "program":{
                        "programId":"program-58510e126d084b6ba645c500ac6e8d81",
                        "userSuppliedId":"5b218ea7-57e5a730-64a1d258",
                        "name":"My Program!",
                        "active":true,
                        "currency":"CAD",
                        "dateCreated":"2016-10-05T23:53:35.000+0000",
                        "programExpiresDate":null,
                        "programStartDate":"2016-10-05T23:53:35.000+0000",
                        "codeActivePeriodInDays":365,
                        "codeValueMin":100,
                        "codeValueMax":50000,
                        "fixedCodeValues":null,
                        "metadata":null
                     }
                  }
               ],
               "pagination":{
                  "count":2,
                  "limit":100,
                  "maxLimit":1000,
                  "offset":0,
                  "totalCount":2
               }
            }
            
            
            
# Data Structures

## Pagination (object)
+ limit (number, optional) - The maximum number of results to return at once. Default 100.
+ offset (number, optional) - The offset of the first results in the total results. Default 0.

## PaginationResponse (Pagination) ]
+ count (number, required)
+ limit  (number, required)
+ maxLimit  (number, required)
+ offset  (number, required)
+ totalCount  (number, required)

## IdempotentObject (object)
+ userSuppliedId (string, required) - The unique identifier provided when this call was made. 

## Code (object)
+ currency (string, required) - The 3 character ISO-4217 currency.
+ initialValue (number, required) - The value of the code at creation in the smallest currency unit 
  (such as cents).
+ programId (string, required) - The id of the Program for which the code will be created from.
+ expires (string, optional) - The code's expiry date and time.  This field will be ommitted if the 
  code was not created with an expiry.  ISO-8601 format.
+ startDate (string, optional) - The code's start date and time.  This field will be ommitted if 
  the code was not created with an start date.  ISO-8601 format.
+ metadata (object) - A collection of key/value pairs of additional information about the code. 
  The `giftbit_*` namespace for keys is reserved. 

## CodeResponse (Code)
+ codeLast4 (string) - The last 4 characters of the Code.
+ dateCreated (string) - The Lightrail system time of the creation in ISO-8601 format.
+ expires (string) - The code's expiry date and time.  This field will be ommitted 
  if the code was not created with an expiry.  ISO-8601 format.

## CodeRequest
+ initialValue (number) - the starting value of the code, in the smallest currency unit (such as cents).
+ startDate (string) - The code's optional start date and time.  ISO-8601 format.
+ programId (string) - The id of the Program for which the code will be created from.

## Card (IdempotentObject)

## CardRequest (Card)
+ userSuppliedId (string, required)
+ code (CodeRequest, required)
+ categories (Category)
+ contactId (string) - Lightrail's unique identifier for the Contact. Note, the Contact must be created before the request to create the card.

## CardResponse (Card)
+ cardId (string, required) - Lightrail's unique identifier for this Card. Be sure to persist this 
  value for future operations.
+ userSuppliedId (string, required) - The userSuppliedId provided at Card creation.
+ contactId (string)
+ dateCreated (string, required) - The Lightrail system time of the creation in ISO-8601 format.
+ categories (object) - The Categories associated with this Card. 

## Transaction (IdempotentObject)
+ value (number, required) - The amount of the transaction in the smallest currency unit (such as cents). 
  A transaction cannot reduce the code balance below 0
+ currency  (string, required) The 3 character ISO-4217 currency code.  The supplied currency must match 
  the currency of code when it was created.
+ metadata (object) - A collection of key/value pairs of additional information about the transaction. 
  The `giftbit_*` namespace for keys is reserved.

## TransactionRequest (Transaction) 

## TransactionResponse (Transaction) 
+ dateCreated(string, required) - Lightrail system time of the creation of the transaction. ISO-8601 format.
+ valueAvailableAfterTransaction(number, required) - The remaining balance of the `Code` as a result of 
  the transaction in the smallest currency unit (such as cents).

## Category (object)
+ categoryKey (string) - The key of the category. Examples: "giftbit_order", "city"
+ categoryValue (string) - The value of the category. Examples: "My Order", "san francisco"

## CategoryResponse (object)
+ categoryId (string) - Lightrail's unique identifier for this Category
+ key (string) - The key of the category.
+ value (string) - The value of the category.

## BalanceResponse (object)
+ currentValue (number) - The current balance of the Code.

## Healthcheck (object)
+ username (string) - The email address associated with the credentials provided.
+ servertime (string) - The current time on the server (ISO 8601 format).
+ mode (string) - String indicating whether the credentials provided are for TEST or LIVE mode.

## ContactRequest (object)
+ userSuppliedId (string, required) - This must be unique.
+ email (string) - Optional.
+ firstName (string) - Optional.
+ lastName (string) - Optional.

## Contact (object)
+ contactId (string, required) - Lightrail's unique identifier for this Contact. Be sure to persist this value for future operations.
+ userSuppliedId (string, required) - The unique ID supplied on Contact creation.
+ dateCreated(string, required) - Lightrail system time of the creation of the Contact. ISO-8601 format.
+ email (string) - The provided email, if applicable.
+ firstName (string) - The provided firstName, if applicable.
+ lastName (string) - The provided lastName, if applicable.